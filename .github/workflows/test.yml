name: CML
on: [push]

defaults:
  run:
    working-directory: Module 2. Data governance

jobs:
  job1:
    name: Test Job 1
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: set up python env
        uses: actions/setup-python@v2

      - name: set up cml
        uses: iterative/setup-cml@v1

      - name: Action summary
        run: |
          echo "## Action summary" >> report.md
          echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event." >> report.md
          echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!" >> report.md
          echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}." >> report.md
          echo "💡 The ${{ github.repository }} repository has been cloned to the runner." >> report.md
          echo "🖥️ The workflow is now ready to test your code on the runner." >> report.md

      - name: instal dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Run flake8
        uses: julianwachholz/flake8-action@v2
        with:
          checkName: "Python Lint"
          path: ./
          config: ./Module 2. Data governance/tox.ini
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: If needed, commit black changes to the pull request.
        if: ${{ failure() }}
        run: |
          black .
          git config --global user.name 'autoblack'
          git config --global user.email 'cclauss@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am "fixup: Format Python code with Black"
          git push

      - name: Run Pylint
        run: |
          python tests/lint.py --threshold 4  # add output string to report.md

      - name: Run dvc
        run: dvc pull

      - name: Run tests
        run: pytest

      - name: show dvc metrics
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## Model metrics" >> report.md
          cat reports/metrics/metrics.json

          echo "## ROC-AUC Curve"
          cml-publish roc-auc-curve.png --md >> report.md

          cml send-comment report.md

version: '3.8'

services:
  minio:
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2022-05-08T23-50-31Z
    hostname: minio
    command: server --console-address ":9001" /data/
    expose:
      - "9000"
      - "9001"
    networks:
      - s3
    environment:
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./docker/minio:/data

  nginx:
    container_name: nginx
    image: nginx:1.19.2-alpine
    hostname: nginx
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - s3
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - minio

  db:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - "54320:5432"
    networks:
      - postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - ./docker/postgres:/data/postgres

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: grac20101@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - postgres
    volumes:
      - ./docker/pgadmin:/var/lib/pgadmin

  mlflow:
    image: mlflow_server
    container_name: mlflow
    restart: always
    ports:
      - "5001:5000"
    networks:
      - postgres
      - s3
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB} --default-artifact-root s3://${AWS_S3_BUCKET} --host 0.0.0.0

  training:
    image: training_scripts_image
    container_name: training_scripts
    restart: always
    networks:
      - s3
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: /bin/bash

  service:
    image: service
    container_name: service
    networks:
      - s3
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8080:80"

networks:
  s3:
    driver: bridge
  postgres:
    driver: bridge